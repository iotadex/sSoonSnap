package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"math/big"
	"ssoon_snap/cont"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

var url string = "https://json-rpc.evm.shimmer.network"
var sSOONBTC common.Address = common.HexToAddress("0x987d83af72AFe343e1A7bafaF968c8340bEe3EfA")
var sSOONETH common.Address = common.HexToAddress("0x04E7d4A28f61f2E22b71F4842Cdb236092C42466")
var sSOONIOTA common.Address = common.HexToAddress("0xa2c8B10F8307246B0252090a8073b6a5c04c7Ff0")
var stakeBTC *cont.StakeNFT
var stakeETH *cont.StakeNFT
var stakeIota *cont.StakeNFT

func main() {
	client, err := ethclient.Dial(url)
	if err != nil {
		panic(err)
	}

	nft, err := cont.NewINonfungiblePositionManager(common.HexToAddress("0x5f0E8A90f8093aBddF0cA21898B2A71350754a0D"), client)
	if err != nil {
		panic(err)
	}

	stakeBTC, err = cont.NewStakeNFT(sSOONBTC, client)
	if err != nil {
		panic(err)
	}

	stakeETH, err = cont.NewStakeNFT(sSOONETH, client)
	if err != nil {
		panic(err)
	}

	stakeIota, err = cont.NewStakeNFT(sSOONIOTA, client)
	if err != nil {
		panic(err)
	}

	var ids []int64 = []int64{}

	sSOON := common.HexToAddress("0x3C844FB5AD27A078d945dDDA8076A4084A76E513")

	amounts := make(map[string]uint64)
	for _, id := range ids {
		time.Sleep(time.Millisecond * 400)
		fmt.Println("Token id :", id)
		//nft.OwnerOf(&bind.CallOpts{}, big.NewInt(i))
		pos, err := nft.Positions(&bind.CallOpts{}, big.NewInt(id))
		if err != nil {
			fmt.Println("nft.Positions", id, "error.", err)
			continue
		}

		owner, err := nft.OwnerOf(&bind.CallOpts{}, big.NewInt(id))
		if err != nil {
			fmt.Println("nft.OwnerOf", id, "error.", err)
			continue
		}

		o, a, err := GetStakedOwnerfunc(owner.Bytes(), stakeBTC, big.NewInt(id))
		if err != nil {
			fmt.Println("stated contract", id, "error.", err)
			continue
		}

		var amount *big.Int
		if bytes.Equal(pos.Token0.Bytes(), sSOON.Bytes()) {
			amount = pos.TokensOwed0
		} else {
			amount = pos.TokensOwed1
		}
		if a != nil {
			owner = o
			amount.Add(amount, a)
		}
		if a, exist := amounts[owner.Hex()]; exist {
			amounts[owner.Hex()] = a + amount.Uint64()
		} else {
			amounts[owner.Hex()] = amount.Uint64()
		}
	}
	data, _ := json.Marshal(amounts)
	fmt.Println(string(data))
}

func GetIds(nft *cont.INonfungiblePositionManager, sSOON common.Address) {
	ids := make([]int64, 0)
	for i := int64(1); i < 2675; i++ {
		time.Sleep(time.Millisecond * 500)
		//nft.OwnerOf(&bind.CallOpts{}, big.NewInt(i))
		pos, err := nft.Positions(&bind.CallOpts{}, big.NewInt(i))
		if err != nil {
			fmt.Println("Token id", i, " position error.", err)
			continue
		}
		if bytes.Equal(pos.Token0.Bytes(), sSOON.Bytes()) || bytes.Equal(pos.Token1.Bytes(), sSOON.Bytes()) {
			ids = append(ids, i)
		}
	}
	fmt.Println(ids)
}

func GetStakedOwnerfunc(owner []byte, con *cont.StakeNFT, tokenid *big.Int) (common.Address, *big.Int, error) {
	if bytes.Equal(owner, sSOONBTC[:]) {
		return IsStaked(owner, stakeBTC, tokenid)
	} else if bytes.Equal(owner, sSOONETH[:]) {
		return IsStaked(owner, stakeETH, tokenid)
	} else if bytes.Equal(owner, sSOONIOTA[:]) {
		return IsStaked(owner, stakeIota, tokenid)
	}
	return common.Address{}, nil, nil
}

func IsStaked(owner []byte, con *cont.StakeNFT, tokenid *big.Int) (common.Address, *big.Int, error) {
	s, err := con.StakingNFTs(&bind.CallOpts{}, tokenid)
	if err != nil {
		return s.Owner, nil, err
	}
	amount, err := con.CanClaimAmount(&bind.CallOpts{}, s.Owner)
	if err != nil {
		return s.Owner, nil, err
	}
	_, amounts, err := con.LockedRewardAmount(&bind.CallOpts{}, s.Owner)
	if err != nil {
		return s.Owner, nil, err
	}
	for _, a := range amounts {
		amount.Add(amount, a)
	}
	return s.Owner, amount, nil
}
